"You are an expert full-stack developer and security auditor specializing in Express.js apps with React/Shadcn frontends for social media automation, built in Replit. The date is July 25, 2025—use the latest best practices from OWASP, Express 5.x docs, and Shadcn UI guidelines (e.g., conditional rendering for menus, session regeneration on state changes like sub cancellation).

Review the provided codebase [insert all files: server startup script with Express config/middleware/routes/OAuth, session middleware module, and Shadcn config JSON]. The issue: After subscription cancellation, the hamburger menu still shows 'Cancel Subscription' despite the plan being 'Cancelled' and posts at 0/0. This indicates stale sessions/state and poor UX integration.

Focus on identifying breaks/vulnerabilities across: cookies (e.g., not invalidated on cancel), login processes (e.g., no MFA/post-login regen), sessions (e.g., no absolute timeouts, Redis vulns), quota management (e.g., session-only, not locked post-cancel), auto posting (e.g., not disabled), customer onboarding (e.g., no gated flows), OAuth (e.g., tokens not revoked).

Key Instructions to Avoid Regressions:

Do NOT create minimal/stubbed code—preserve and enhance existing structures (e.g., full routes.ts if implied, integrate with existing webhook/auth endpoints without overwriting).
Suggest fixes as precise code snippets (JS/TSX) that plug into existing files without breaking other parts (e.g., conditional JSX for Shadcn DropdownMenu, session updates in webhook).
Ensure fixes tie sessions to sub changes (e.g., regenerate on cancel, check subscriptionActive in middleware).
Output: Categorized issues with severity/explanation, fixes, overall readiness (% fixed, launch-ready?), and tests. Prioritize UX/security for launch."
Prompt for Last Reply #2 (Routes.ts/API HTML Error - Refined to Avoid Regressions)
"You are an expert Express.js architect and vulnerability scanner for Replit-based apps integrating social APIs, with 2025 knowledge of browser restrictions (e.g., cookie partitioning) and OWASP session guidelines.

Analyze the codebase [insert all files: server startup with Express setup/routes mounting/static fallback, session middleware, and any routes.ts fragments]. The bug: API endpoints return HTML (index.html) instead of JSON, causing 'Unexpected token <' errors—likely from incomplete routes.ts registration, leading to fallback serving.

Audit for broken elements in: cookies (e.g., not set without routes), login (e.g., no endpoints for session init), sessions (e.g., no validation without middleware application), quota management (e.g., unenforceable without routes), auto posting (e.g., routes missing gates), customer onboarding (e.g., stalled flows), OAuth (e.g., callbacks not handled, token leaks).

Key Instructions to Avoid Regressions:

AVOID minimal stubs—rebuild routes.ts as a full, modular Router() with all essential endpoints (auth, quota, auto-post, onboard, OAuth, subs) based on existing code patterns, without overwriting or simplifying existing logic.
Ensure route order: Mount API router BEFORE static fallback; use async handlers and error middleware per group.
Provide a complete routes.ts skeleton snippet that integrates sessions/quota/auth middleware, plugs into server startup, and prevents HTML leaks.
Tie fixes to security (e.g., regen sessions in auth routes, revoke OAuth in cancel routes).
Output: Issues categorized by severity/why broken, exact fixes/code, readiness assessment (% fixed, launch-ready?), tests. Make it launch-prioritized, no delays."
There—that's your rollback ammo. Feed these into whatever tool or Replit prompt you're using, and they should yield solid, non-destructive results without the regression crap. If they still glitch, give me more files (like the actual routes.ts), and I'll review/fix direct