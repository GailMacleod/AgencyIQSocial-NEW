IMMEDIATE PRIORITY FIXES (Resolve 80% of Issue Now)
Session Cookie Security Configuration
Analysis: Prod enforces secure:true on cookies (good for HTTPS), but Replit's deployment proxy may not fully enable HTTPS, causing cookies to drop/not send (dev uses HTTP, so mismatch). This leads to immediate session expiry/timeout as cookies aren't established.
Solution: Dynamically set cookie secure flag based on env (secure: process.env.NODE_ENV === 'production' && process.env.REPLIT_DEPLOYED === 'true'). Add sameSite: 'lax' to allow cross-site (for prod domain). Extend maxAge to 604800000 (7 days) to prevent absolute timeout, with saveUninitialized: false to avoid empty sessions.
Impact: Fixes sign-in by ensuring cookies persist over HTTPS in prod without dev breakage.
Environment Variable Validation
Analysis: SESSION_SECRET and DATABASE_URL exist but likely mismatch in prod (e.g., wrong DB string causes PG connection fail, secret mismatch invalidates sessions). OAuth keys may point to dev apps.
Solution: Add a startup validation script logging all critical env vars on app boot (console.log for SESSION_SECRET length, test PG connection with pool.query('SELECT 1')). Use Replit's secrets panel for prod values—ensure DATABASE_URL is prod-specific (e.g., external PG like Neon if Replit's built-in flops). For OAuth, set prod client IDs/secrets/separate redirect URIs (e.g., https://app.theagencyiq.ai/api/oauth/callback).
Impact: Prevents silent fails—logs pinpoint mismatches, enabling quick swaps.
CORS Origin Configuration
Analysis: Hardcoded dev origins (e.g., http://localhost) block prod requests from app.theagencyiq.ai, causing auth fails on cross-origin sign-in attempts.
Solution: Make CORS dynamic: origin function checking against array ['https://app.theagencyiq.ai', 'http://localhost:3000'], credentials: true, allowedHeaders including 'Authorization' for OAuth. Use cors package with preflightContinue: true for OPTIONS.
Impact: Allows prod domain to hit /api/auth endpoints without rejection.
SECONDARY PRIORITY FIXES (Polish for Stability)
Session Store Initialization
Analysis: connect-pg-simple fails to connect in prod (wrong DB string or pool config), falling back to memory (volatile, causes timeouts on restarts).
Solution: Wrap store init in try-catch logging errors (e.g., console.error('PG session store fail:', err)—test connection first). Fallback to MemoryStore only if !process.env.DATABASE_URL, but prefer fixing PG for persistence.
Impact: Ensures sessions persist in prod without expiry on load balance.
OAuth System Integration
Analysis: Passport strats load fine in dev but conflict in prod (e.g., wrong creds or init order after session middleware).
Solution: Load Passport.use after app.use(session), add try-catch on each strategy with logging. Verify prod OAuth app settings (redirects to prod URL, client IDs for production mode).
Impact: Prevents init crashes blocking auth.
ARCHITECTURAL RECOMMENDATIONS (Long-Term to Avoid This Shit)
Environment Detection Enhancement
Analysis: NODE_ENV=production alone misses Replit-specific flags, allowing dev auto-establish (for User ID 2) to run in prod, conflicting with real auth.
Solution: Add isProd check using process.env.REPLIT_DEPLOYED || process.env.NODE_ENV === 'production'; disable dev hacks (auto-login) if isProd. Use config files (dev.config.js/prod.config.js) for env-specific settings.
Impact: Prevents dev-only logic bleeding into prod.