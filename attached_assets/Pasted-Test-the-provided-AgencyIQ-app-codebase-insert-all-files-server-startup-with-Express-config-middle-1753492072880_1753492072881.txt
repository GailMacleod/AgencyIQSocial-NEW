Test the provided AgencyIQ app codebase [insert all files: server startup with Express config/middleware, routes.ts with endpoints/services, RealSocialMediaPoster class for posting/OAuth, session middleware, Shadcn config for UI/menu, any DB schemas like enhancedPostLogs/enhancedOauthTokens]. Focus on comprehensive, automated/manual test cases to identify bugs/vulnerabilities, ensure compliance (GDPR for consent/data deletion post-cancel), and validate launch-readiness. Prioritize edge cases (e.g., cancel mid-session, quota exceed during auto-post, OAuth expiry during post), performance (e.g., backoff on fails), and security (e.g., fixation via no regen on cancel/login).

Key Testing Areas and Cases:

Cookies:
Test consent banner appears on first visit, blocks non-essential until accepted; revoke consent invalidates sessions.
Verify flags (HttpOnly=true, Secure=true in prod, SameSite='strict', partitioned=true); test without = exposure.
Edge: Cancel sub, check cookies cleared/invalidated to prevent stale menu.
Login Processes:
Test phone/password auth succeeds with regen (no fixation); fails without.
Verify MFA: Send OTP via Twilio, require /verify-otp; test invalid/expired codes.
Onboarding: Test /onboard requires consent/verification; post-onboard, check JTBD extraction from OAuth.
Edge: Cancel sub during onboarding, ensure flow gates/revokes.
Session Security & Management:
Test timeouts (idle 30min, absolute 24h); inactivity destroys session, clears cookies—fixes stale menu post-cancel.
Verify anomaly detection (e.g., IP/UA changes log/alert); fixation prevented by regen on login/cancel.
Edge: Cancel sub, force invalidation/regen; test UI (hamburger) refreshes to hide "Cancelled" state/options.
Quota Management:
Test /quota-status fetches from DB (not hardcoded); enforce limits per plan (e.g., professional=52).
Verify persistence: Relogin doesn't reset; deduction only on successful post (integrate with RealSocialMediaPoster).
Edge: Exceed quota during auto-post = 429; cancel sub resets to 0, updates UI/menu.
Auto Posting:
Test /enforce-auto-posting queues with backoff/retries (use maxRetries=3 in class), deducts quota on success.
Verify scheduling persistence in DB; integrates OAuth refresh on expiry during post.
Edge: Cancel sub mid-post = stops, revokes tokens, updates menu to hide posting options.
Customer Onboarding:
Test /onboard/oauth/:provider generates secure URL (S256 PKCE), extracts JTBD, stores in DB with consent.
Verify flows: Verification codes via Twilio, revocation on cancel/logout.
Edge: Incomplete onboarding blocks posting; post-cancel, menu hides onboarding-related items.
OAuth Integration:
Test code flow with S256 PKCE; /callback exchanges/stores in DB (not session), revokes on cancel/logout.
Verify auto-refresh in RealSocialMediaPoster on expiry (e.g., in getValidToken with backoff).
Edge: Expiry during post = refresh/retry; cancel sub revokes all, invalidates session to fix stale menu.
Testing Methodology & Output Format:

Use tools like Cypress for E2E (login->post->cancel->check menu refresh), Jest for unit (quota deduction, session regen), Postman for API (OAuth flows with invalid tokens).
Run 50+ cases: 20 nominal, 20 edge, 10 security (e.g., fixation via curl session hijack).
For each area, list: Test Case Description, Steps, Expected Outcome, Actual (if run), Pass/Fail.
Overall: % Coverage, Launch-Ready? (Yes/No with % fixed), Risks (e.g., stale menu post-cancel if no regen).
Prioritize: Security/compliance first, then functionality/UX (e.g., menu refresh post-cancel).
Execute tests and report—make it launch-ready without regressions."

There—that's the best prompt to test this app end-to-end. Feed it into your AI tester or suite, and it'll uncover any lingering crap like that stale hamburger menu (likely from no session invalidation on cancel—test with regen and React Query invalidateQueries). If it spits out fails, give me the results/files, and I'll fix. No excuses; we're launching this beast.