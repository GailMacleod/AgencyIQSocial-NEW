Text-to-video
Veo 3 is able to generate videos from text prompts (see in the code comments for ideas).

Prompting Tips for Veo
To get the most out of Veo, consider incorporating specific video terminology into your prompts Veo understands a wide range of terms related to:

Shot composition: Specify the framing and number of subjects in the shot (e.g., "single shot", "two shot", "over-the-shoulder shot").
Camera positioning and movement: Control the camera's location and movement using terms like "eye level", "high angle", "worms eye", "dolly shot", "zoom shot", "pan shot," and "tracking shot*".
Focus and lens effects: Use terms like "shallow focus", "deep focus", "soft focus", "macro lens", and "wide-angle lens" to achieve specific visual effects.
Overall style and subject: Guide Veo's creative direction by specifying styles like "sci-fi", "romantic comedy", "action movie" or "animation". You can also describe the subjects and backgrounds you want, such as "cityscape", "nature", "vehicles", or "animals."
Check the Veo prompt guide for more details and tips.

Optional parameters for Veo 3
The prompt is the only mandatory parameters, the others are all optional.

negative_prompt: What you don't want to see in the video
person_generation: Tell you model if it's allowed to generate adults in the videos or not. Children are always blocked.
aspect_ratio: Aspect ratio of the video. Accepted values are "16:9" (landscape) and "9:16" (portrait).
number_of_videos: With Veo 3, it is always a single shot generation (one video generated).
duration_seconds: With Veo 3, it is always 8 seconds long videos generated.
aspect ratio: With Veo 3, you can generate videos in 16:9 only.
A video creation from a simple text prompt
It takes about a minute for the videos to be generated.


[ ]
if not I_am_aware_that_veo_is_a_paid_feature_and_am_OK_with_paying_to_run_this_colab:
  print("Veo is a paid feature. Please change the variable 'I_am_aware_that_veo_is_a_paid_feature_and_am_OK_with_paying_to_run_this_colab' to True if you are okay with paying to run it.")

else:
  import time
  from IPython.display import Video, HTML

  prompt = "a close-up shot of a golden retriever playing in a field of sunflowers" # @param {type: "string"}

  # Optional parameters
  negative_prompt = "barking, woofing" # @param {type: "string"}

  operation = client.models.generate_videos(
      model=VEO_MODEL_ID,
      prompt=prompt,
      config=types.GenerateVideosConfig(
        # At the moment the config must not be empty
        aspect_ratio="16:9",  # 16:9 is the only supported for Veo 3
        number_of_videos=1, # 1 video generated per request
        negative_prompt=negative_prompt,
      ),
  )

  # Waiting for the video(s) to be generated
  while not operation.done:
      time.sleep(20)
      operation = client.operations.get(operation)
      print(operation)

  print(operation.result.generated_videos)

  for n, generated_video in enumerate(operation.result.generated_videos):
    client.files.download(file=generated_video.video)
    generated_video.video.save(f'video{n}.mp4') # Saves the video(s)
    display(generated_video.video.show()) # Displays the video(s) in a notebook
prompt:
a close-up shot of a golden retriever playing in a field of sunflowers
negative_prompt:
barking, woofing
Watch a sample generation üé•
üçø The video you will generate will be similar to this: A golden retriever playing in a field of sunflowers.

Working with lighting controls
Veo 3 also allows you to have a good control on the lighing of the video being generated.


[ ]
if not I_am_aware_that_veo_is_a_paid_feature_and_am_OK_with_paying_to_run_this_colab:
  print("Veo is a paid feature. Please change the variable 'I_am_aware_that_veo_is_a_paid_feature_and_am_OK_with_paying_to_run_this_colab' to True if you are okay with paying to run it.")

else:
  import time
  from google.genai import types
  from IPython.display import Video, HTML

  prompt = "a solitary, ancient oak tree silhouetted against a dramatic sunset. Emphasize the exquisite control over lighting: capture the deep, warm hues of the setting sun backlighting the tree, with subtle rays of light piercing through the branches, highlighting the texture of the bark and leaves with a golden glow. The sky should transition from fiery orange at the horizon to soft purples and blues overhead, with a single, faint star appearing as dusk deepens. Include the gentle sound of a breeze rustling through the leaves, and the distant call of an owl." # @param {type: "string"}

  # Optional parameters
  negative_prompt = "" # @param {type: "string"}

  operation = client.models.generate_videos(
      model=VEO_MODEL_ID,
      prompt=prompt,
      config=types.GenerateVideosConfig(
        # At the moment the config must not be empty
        aspect_ratio="16:9",  # 16:9 is the only supported for Veo 3
        number_of_videos=1, # 1 video generated per request
        negative_prompt=negative_prompt,
      ),
  )

  # Waiting for the video(s) to be generated
  while not operation.done:
      time.sleep(20)
      operation = client.operations.get(operation)
      print(operation)

  print(operation.result.generated_videos)

  for n, generated_video in enumerate(operation.result.generated_videos):
    client.files.download(file=generated_video.video)
    generated_video.video.save(f'video{n}.mp4') # Saves the video(s)
    display(generated_video.video.show()) # Displays the video(s) in a notebook
prompt:
a solitary, ancient oak tree silhouetted against a dramatic sunset. Emphasize the exquisite control over lighting: capture the deep, warm hues of the setting sun backlighting the tree, with subtle rays of light piercing through the branches, highlighting the texture of the bark and leaves with a golden glow. The sky should transition from fiery orange at the horizon to soft purples and blues overhead, with a single, faint star appearing as dusk deepens. Include the gentle sound of a breeze rustling through the leaves, and the distant call of an owl.
negative_prompt:
Insert text here
Watch a sample generation üé•
üçø The video you will generate will be similar to this: A solitary, ancient oak tree silhouetted against a dramatic sunset.

Working with camera controls
Veo 3 also allows you to have a good control on the camera shots and behavior of the video being generated.


[ ]
if not I_am_aware_that_veo_is_a_paid_feature_and_am_OK_with_paying_to_run_this_colab:
  print("Veo is a paid feature. Please change the variable 'I_am_aware_that_veo_is_a_paid_feature_and_am_OK_with_paying_to_run_this_colab' to True if you are okay with paying to run it.")

else:
  import time
  from google.genai import types
  from IPython.display import Video, HTML

  prompt = "a realistic video of a futuristic red sportscar speeding down a winding coastal highway at dusk. Begin with a high-angle drone shot that slowly descends, transitioning into a close-up, low-angle tracking shot that perfectly follows the car as it rounds a curve, emphasizing its speed and the gleam of its paint under the fading light. Then, execute a smooth, rapid dolly zoom, making the background compress as the car remains the same size, conveying a sense of intense focus and speed. Finally, end with a perfectly stable, slow-motion shot from a fixed roadside perspective as the car blurs past, its taillights streaking across the frame. Include the immersive sound of the engine roaring, the tires gripping the asphalt, and the distant crash of waves." # @param {type: "string"}

  # Optional parameters
  negative_prompt = "" # @param {type: "string"}

  operation = client.models.generate_videos(
      model=VEO_MODEL_ID,
      prompt=prompt,
      config=types.GenerateVideosConfig(
        # At the moment the config must not be empty
        aspect_ratio="16:9",  # 16:9 is the only supported for Veo 3
        number_of_videos=1, # 1 video generated per request
        negative_prompt=negative_prompt,
      ),
  )

  # Waiting for the video(s) to be generated
  while not operation.done:
      time.sleep(20)
      operation = client.operations.get(operation)
      print(operation)

  print(operation.result.generated_videos)

  for n, generated_video in enumerate(operation.result.generated_videos):
    client.files.download(file=generated_video.video)
    generated_video.video.save(f'video{n}.mp4') # Saves the video(s)
    display(generated_video.video.show()) # Displays the video(s) in a notebook
prompt:
a realistic video of a futuristic red sportscar speeding down a winding coastal highway at dusk. Begin with a high-angle drone shot that slowly descends, transitioning into a close-up, low-angle tracking shot that perfectly follows the car as it rounds a curve, emphasizing its speed and the gleam of its paint under the fading light. Then, execute a smooth, rapid dolly zoom, making the background compress as the car remains the same size, conveying a sense of intense focus and speed. Finally, end with a perfectly stable, slow-motion shot from a fixed roadside perspective as the car blurs past, its taillights streaking across the frame. Include the immersive sound of the engine roaring, the tires gripping the asphalt, and the distant crash of waves.
negative_prompt:
Insert text here
Watch a sample generation üé•
üçø The video you will generate will be similar to this: a futuristic red sportscar speeding down a winding coastal highway.

Working with audio controls
Veo 3 also allows you to control audio details on your generated video.


[ ]
if not I_am_aware_that_veo_is_a_paid_feature_and_am_OK_with_paying_to_run_this_colab:
  print("Veo is a paid feature. Please change the variable 'I_am_aware_that_veo_is_a_paid_feature_and_am_OK_with_paying_to_run_this_colab' to True if you are okay with paying to run it.")

else:
  import time
  from google.genai import types
  from IPython.display import Video, HTML

  prompt = "fireworks at a beautiful city skyline scene with many different fireworks colors and sounds. sounds from excited people enjoying the show surrounding the camera POV can be heard too." # @param {type: "string"}

  # Optional parameters
  negative_prompt = "" # @param {type: "string"}

  operation = client.models.generate_videos(
      model=VEO_MODEL_ID,
      prompt=prompt,
      config=types.GenerateVideosConfig(
        # At the moment the config must not be empty
        aspect_ratio="16:9",  # 16:9 is the only supported for Veo 3
        number_of_videos=1, # 1 video generated per request
        negative_prompt=negative_prompt,
      ),
  )

  # Waiting for the video(s) to be generated
  while not operation.done:
      time.sleep(20)
      operation = client.operations.get(operation)
      print(operation)

  print(operation.result.generated_videos)

  for n, generated_video in enumerate(operation.result.generated_videos):
    client.files.download(file=generated_video.video)
    generated_video.video.save(f'video{n}.mp4') # Saves the video(s)
    display(generated_video.video.show()) # Displays the video(s) in a notebook
prompt:
fireworks at a beautiful city skyline scene with many different fireworks colors and sounds. sounds from excited people enjoying the show surrounding the camera POV can be heard too.
negative_prompt:
Insert text here
Watch a sample generation üé•
üçø The video you will generate will be similar to this: fireworks at a beautiful city skyline scene.

Working with dialogs
You have the flexibility to define the dialog on your videos too.


[ ]
if not I_am_aware_that_veo_is_a_paid_feature_and_am_OK_with_paying_to_run_this_colab:
  print("Veo is a paid feature. Please change the variable 'I_am_aware_that_veo_is_a_paid_feature_and_am_OK_with_paying_to_run_this_colab' to True if you are okay with paying to run it.")

else:
  import time
  from google.genai import types
  from IPython.display import Video, HTML

  prompt = "Two charismatic and funny raindrops like coloured characters. The first character start saying \"oh my god, it is really hot in here!\" - then the second answers \"right? I'm melting down! then it melts down completely." # @param {type: "string"}

  # Optional parameters
  negative_prompt = "texts, captions, subtitles" # @param {type: "string"}

  operation = client.models.generate_videos(
      model=VEO_MODEL_ID,
      prompt=prompt,
      config=types.GenerateVideosConfig(
        # At the moment the config must not be empty
        aspect_ratio="16:9",  # 16:9 is the only supported for Veo 3
        number_of_videos=1, # 1 video generated per request
        negative_prompt=negative_prompt,
      ),
  )

  # Waiting for the video(s) to be generated
  while not operation.done:
      time.sleep(20)
      operation = client.operations.get(operation)
      print(operation)

  print(operation.result.generated_videos)

  for n, generated_video in enumerate(operation.result.generated_videos):
    client.files.download(file=generated_video.video)
    generated_video.video.save(f'video{n}.mp4') # Saves the video(s)
    display(generated_video.video.show()) # Displays the video(s) in a notebook
prompt:
Two charismatic and funny raindrops like coloured characters. The first character start saying "oh my god, it is really hot in here!" - then the second answers "right? I'm melting down! then it melts down completely.
negative_prompt:
texts, captions, subtitles
Watch a sample generation üé•
üçø The video you will generate will be similar to this: A dialog of two charismatic and funny raindrops like coloured characters.

Experimenting with Veo 2
The previous model generation, Veo 2, is still available for developers via the Gemini API. Different from Veo 3, videos generated by Veo 2 does not contain audio together.

The key difference is: Using Veo 2 you can perform Text-to-Video generation (just like Veo 3) but you can also generate videos from your images (Image-to-Video).

Safety is a core focus, with robust measures to prevent inappropriate or harmful content, and all generated videos are digitally watermarked with Google DeepMind‚Äôs SynthID.

Select the Veo 2 model

[ ]
VEO_MODEL_ID = "veo-2.0-generate-001" # @param ["veo-2.0-generate-001"] {"allow-input":true, isTemplate: true}
VEO_MODEL_ID:
veo-2.0-generate-001

Image-to-video
You can also generate images from an base image and a prompt. Here are two exemples, one in which you provide the image and one in which you will use Imagen3 to generate it.

Using your own images
If you want to use your own image, upload it to colab by clicking on the folder icon in the left menu (it should be the 5th choice), then on the upload icon (the first one) at the top of left left panel that should have been opened.

Your images should be uploaded in the /content folder of this colab instance.

Or you can also using this code to upload your image:


[ ]
import os

from google.colab import files

uploaded = files.upload()
for fn in uploaded.keys():
  os.rename(fn, 'image.jpg')

Now that you have your own image, you can add it to your Veo prompt.

If you don't know what to prompt about your image, keep the prompt empty and the model will figure out what to generate.


[ ]
from IPython.display import Image as Img

display(Img('image.jpg', width=600)) # display the uploaded image


[ ]
if not I_am_aware_that_veo_is_a_paid_feature_and_am_OK_with_paying_to_run_this_colab:
  print("Veo is a paid feature. Please change the variable 'I_am_aware_that_veo_is_a_paid_feature_and_am_OK_with_paying_to_run_this_colab' to True if you are okay with paying to run it.")

else:
  import time
  from google.genai import types
  from IPython.display import Video, HTML
  from PIL import Image
  import io

  prompt = "" # @param {"type":"string","placeholder":"Write your owm prompt of leave empty to let the model decide"}
  image_name = "" # @param {type: "string", "placeholder":"Enter the name of your image or leave empty for the one you just uploaded."}

  # Optional parameters
  negative_prompt = "ugly, low quality" # @param {type: "string"}
  aspect_ratio = "9:16" # @param ["16:9", "9:16"]
  number_of_videos = 1 # @param {type:"slider", min:1, max:4, step:1}
  duration = 8 # @param {type:"slider", min:5, max:8, step:1}

  # Loading the image
  if image_name=="":
    image_name = "image.jpg"
  im = Image.open(image_name)

  # converting the image to bytes
  image_bytes_io = io.BytesIO()
  im.save(image_bytes_io, format=im.format)
  image_bytes = image_bytes_io.getvalue()

  operation = client.models.generate_videos(
      model=VEO_MODEL_ID,
      prompt=prompt,
      image=types.Image(image_bytes=image_bytes, mime_type=im.format),
      config=types.GenerateVideosConfig(
        # At the moment the config must not be empty
        aspect_ratio = aspect_ratio,  # 16:9 or 9:16
        number_of_videos = number_of_videos, # supported value is 1-4
        negative_prompt = negative_prompt,
        duration_seconds = duration, # supported value is 5-8
      ),
  )

  # Waiting for the video(s) to be generated
  while not operation.done:
      time.sleep(20)
      operation = client.operations.get(operation)
      print(operation)

  print(operation.result.generated_videos)

  for n, generated_video in enumerate(operation.result.generated_videos):
    client.files.download(file=generated_video.video)
    generated_video.video.save(f'video{n}.mp4') # Saves the video(s)
    display(generated_video.video.show()) # Displays the video(s) in a notebook
prompt:
Write your owm prompt of leave empty to let the model decide
image_name:
Enter the name of your image or leave empty for the one you just uploaded.
negative_prompt:
ugly, low quality
aspect_ratio:
9:16
number_of_videos:

1
duration:

8
Watch a sample generation üé•
üçø The video you will generate will be similar to this: A video generated from the uploaded image.

Using Imagen4 to generate the base image
This time you're going to generate a base image with imagen and, when happy with it, create a video out of it.

If you want to know more about Imagen, you can check Imagen notebook to understand how to use it.

‚ö†Ô∏è	
Be careful, Imagen 4 is a paid only feature (cf. pricing). Image-out is an alternative to Imagen with a free tier.

[ ]
if not I_am_aware_that_veo_is_a_paid_feature_and_am_OK_with_paying_to_run_this_colab:
  print("Imagen is a paid feature. Please change the variable 'I_am_aware_that_veo_is_a_paid_feature_and_am_OK_with_paying_to_run_this_colab' to True if you are okay with paying to run it.")

else:
  prompt = "A high quality photorealistic front image of a ginger cat driving a red convertible racing car"  # @param {type: "string"}

  # Optional parameters
  negative_prompt = "ugly, low quality, static, weird physics" # @param {type: "string"}
  aspect_ratio = "16:9" # @param ["16:9", "9:16"]
  number_of_videos = 1 # @param {type:"slider", min:1, max:4, step:1}
  duration = 8 # @param {type:"slider", min:5, max:8, step:1}


  result = client.models.generate_images(
      model="imagen-4.0-generate-preview-06-06",
      prompt=prompt,
      config=types.GenerateImagesConfig(
          number_of_images=1,
          output_mime_type="image/jpeg",
          aspect_ratio=aspect_ratio
          #negative_prompt=negativePrompt, # negative prompt is curently only supported by Veo
      )
  )

  result.generated_images[0].image.show()
prompt:
A high quality photorealistic front image of a ginger cat driving a red convertible racing car
negative_prompt:
ugly, low quality, static, weird physics
aspect_ratio:
16:9
number_of_videos:

1
duration:

8

When you are happy with your image, you can use Veo to make a video out of it.


[ ]
if not I_am_aware_that_veo_is_a_paid_feature_and_am_OK_with_paying_to_run_this_colab:
  print("Veo is a paid feature. Please change the variable 'I_am_aware_that_veo_is_a_paid_feature_and_am_OK_with_paying_to_run_this_colab' to True if you are okay with paying to run it.")

else:
  import time
  from IPython.display import Video, HTML

  # Optional parameters
  negative_prompt = "ugly, low quality, static, weird physics" # @param {type: "string"}
  aspect_ratio = "16:9" # @param ["16:9", "9:16"]
negative_prompt:
ugly, low quality, static, weird physics
aspect_ratio:
16:9
number_of_videos:

1
duration:

8
Watch a sample generation üé•
üçø The video you will generate will be similar to this: A video generated from the Imagen generated image.


[ ]
# To prevent you from running the notebook by mistake
I_am_aware_that_veo_is_a_paid_feature_and_am_OK_with_paying_to_run_this_colab = False
Next Steps
Useful API references:
Check the Veo documentation and the prompt guide for more details on how to use Veo and best prompt it.

Continue your discovery of the Gemini API
Here are other cool Gemini features that you might find interesting:

Imagen can generate images with fine detail, rich lighting, and few distracting artifact from natural language prompts;
Gemini's Image-out built-in image output can also generate images and let you iterate on them by chatting with the model;
Built-in Audio-out is also a great multimodal output capability that's quite fun to play with.
