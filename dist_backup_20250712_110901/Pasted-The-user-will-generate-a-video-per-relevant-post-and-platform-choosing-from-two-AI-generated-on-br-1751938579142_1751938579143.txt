The user will generate a video per relevant post and platform, choosing from two AI-generated, on-brand prompts (short-form, ASMR), editing with up to 10 words. A modal will show the rendering process (2.3s avg), followed by an auto-playing, muted preview. Users can approve or delete the video, and approval triggers posting via existing OAuth. The integration will be containerized to isolate risks, ensuring the app remains functional if issues arise.

What Needs to Be Done
Establish a Stable Build Environment:
Install a lightweight compiler (esbuild) to bundle TypeScript and React into a single JavaScript file.
Create a build script (build.sh) to compile the frontend, copy the HTML file, and minify the output, targeting a bundle size under 1MB.
Verify the compiled file runs in the browser and on Replit, checking for errors and performance.
Design the Containerized User Workflow:
Develop a VideoPostCard React component to encapsulate the video generation process for each post card.
Add a “Generate Video” button, visible only for relevant posts and platforms, limited to one use per post (tracked via user state or database).
On button click, open a modal within the component, displaying “Generating…” with a progress indicator (e.g., timer for 2.3s).
Inside the modal, show two AI-generated prompts (short-form, ASMR, on-brand) for selection, with a text box for edits (max 10 words).
Ensure the component isolates its state (prompts, video URL, approval status) to prevent interference with other UI elements.
Integrate Video Generation with Seedance 1.0:
Create a backend module (videoService.js) to request two prompts from Seedance 1.0 and return them to the modal.
Trigger video generation with the chosen/edited prompt via a new API route, updating the modal with rendering status.
Deliver the 1080p video URL externally (no local storage), confirming compatibility (CORS, MIME type) with a proxy fallback if needed.
Enforce the one-video limit per post, disabling the “Generate Video” button after use.
Enable Auto-Playing Preview:
Display the video in the modal with autoplay and muted attributes to comply with browser policies (e.g., Chrome requires muting).
Include a fallback (e.g., manual play controls) if auto-play is blocked, ensuring accessibility without click-throughs for initial preview.
Test Seedance URLs thoroughly, using a proxy (e.g., /proxy-video/:id) if CORS or playback fails.
Implement Approval and Deletion Options:
Add “Approve” and “Delete” buttons in the modal after rendering completes.
On “Approve,” save the video URL for posting and close the modal; on “Delete,” remove the video option, reverting to text-only and closing the modal.
Set Up Posting with Existing OAuth:
Develop a new API route (/api/posts/approve-post) in the videoService.js module to handle approval and posting.
Use the current OAuth tokens (retrieved from the existing setup) to post the content and video URL to all platforms simultaneously.
Provide a success message in the VideoPostCard component upon posting.
Implement Error Boundaries:
Add error handling in the VideoPostCard component to catch rendering, playback, or posting failures, displaying a fallback (e.g., “Video unavailable, proceed with text”) instead of crashing the app.
Include try-catch in the videoService.js module to manage Seedance or platform errors, returning a safe response (e.g., 400 or 500 with details).
Optimize Performance:
Minify the build and prune unused dependencies to maintain a bundle size under 1MB.
Set memory usage to under 256MB with environment variables in the deployment script.
Cache static files to reduce server load.
Ensure Accessibility:
Add aria-label attributes to all interactive elements in the VideoPostCard component (e.g., buttons, modal) for compliance.
Prepare Replit Deployment:
Clear all Replit deployment caches to ensure visibility and sync.
Create a deployment script (deploy.sh) to build the app, run the server, and check the URL, ensuring a smooth rollout.
Test Incrementally:
Validate the build output in isolation, confirming size and functionality.
Test prompt generation and selection in the modal, ensuring on-brand ASMR content.
Verify video rendering, auto-play (with fallback), and approval/deletion logic.
Check the posting process with OAuth, ensuring platform delivery.
Assess UI responsiveness, API responses, and memory usage (<256MB) against targets before full deployment.
What Must Not Be Touched
The current backend configuration (Express on port 5000).
The existing OAuth authentication system.
The Seedance 1.0 content generation functionality.
Why This Strategy Works
Containerization: The VideoPostCard component and videoService.js module isolate video logic, preventing app-wide failures if Seedance or playback issues occur.
User Control: The workflow (prompt choice, rendering window, approval) aligns with your vision, enhancing engagement without limitless generation.
Stability: A lightweight compiler ensures reliable builds, avoiding past deployment hiccups.
Auto-Play Assurance: Muted autoplay with fallbacks meets the no-click requirement, tested for compatibility.
OAuth Efficiency: Using existing tokens avoids new authentication layers.
Performance: Size and memory optimization, learned from bloat issues, keeps the app lean.
Accessibility: aria-label ensures inclusivity, addressing past warnings.
Replit Readiness: Cache clears and testing prevent visibility and sync problems.
Error Proofing: Boundaries and incremental validation eliminate rollbacks, a critical lesson.