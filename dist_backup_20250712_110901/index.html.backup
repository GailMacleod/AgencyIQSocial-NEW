<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1" />

    <link rel="icon" type="image/png" href="/attached_assets/agency_logo_1749083054761.png" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="theme-color" content="#3250fa" />
    <title>The AgencyIQ</title>
    <style>
      body {
        font-family: 'Helvetica', 'Arial', sans-serif; /* Unlicensed, Poppins-like fallback */
        font-weight: 400; /* Matches Poppins' versatility */
        line-height: 1.6;
      }
      h1, h2, h3 {
        font-weight: 700; /* Mimics Poppins' bold weights */
      }
    </style>
    
    <!-- Meta Pixel Code -->
    <script>
      !function(f,b,e,v,n,t,s)
      {if(f.fbq)return;n=f.fbq=function(){n.callMethod?
      n.callMethod.apply(n,arguments):n.queue.push(arguments)};
      if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';
      n.queue=[];t=b.createElement(e);t.async=!0;
      t.src=v;s=b.getElementsByTagName(e)[0];
      s.parentNode.insertBefore(t,s)}(window, document,'script',
      'https://connect.facebook.net/en_US/fbevents.js');
      fbq('init', '1409057863445071');
      fbq('track', 'PageView');
      console.log('Meta Pixel test fired - initialization complete');
    </script>
    <!-- End Meta Pixel Code -->
    
    <!-- Facebook SDK for JavaScript -->
    <script>
      window.fbAsyncInit = function() {
        FB.init({
          appId      : '1409057863445071',
          cookie     : true,
          xfbml      : true,
          version    : 'v19.0'
        });
          
        FB.AppEvents.logPageView();   
          
      };

      (function(d, s, id){
         var js, fjs = d.getElementsByTagName(s)[0];
         if (d.getElementById(id)) {return;}
         js = d.createElement(s); js.id = id;
         js.src = "https://connect.facebook.net/en_US/sdk.js";
         fjs.parentNode.insertBefore(js, fjs);
       }(document, 'script', 'facebook-jssdk'));
    </script>
    <!-- End Facebook SDK -->
    
    <script>
      // AGGRESSIVE console filtering - completely block Replit framework messages
      (function() {
        const originalWarn = console.warn;
        const originalError = console.error;
        const originalLog = console.log;
        
        // Comprehensive filter list for all Replit framework noise
        const frameworkFilters = [
          'Error while parsing the \'sandbox\' attribute',
          'allow-downloads-without-user-activation',
          'Unrecognized feature:',
          'ambient-light-sensor',
          'battery',
          'execution-while-not-rendered',
          'execution-while-out-of-viewport',
          'layout-animations',
          'legacy-image-formats',
          'navigation-override',
          'oversized-images',
          'publickey-credentials',
          'speaker-selection',
          'unoptimized-images',
          'unsized-media',
          'pointer-lock',
          'Allow attribute will take precedence',
          'allowfullscreen',
          'allowpaymentrequest',
          'Feature Policy',
          'Permissions Policy directive',
          'Unable to preventDefault inside passive event listener invocation',
          'preventDefault inside passive event listener',
          'passive event listener',
          'Cannot notify while not connected',
          'Failed to load resource',
          'Uncaught (in promise) Error: Cannot notify while not connected',
          'Refused to load the font',
          'because it violates the following Content Security Policy directive',
          'font-src',
          'Refused to load the image',
          'createAssignCSP.js',
          'beacon.js',
          'net::ERR_BLOCKED_BY_RESPONSE.NotSameOrigin',
          'workspace_iframe.html',
          '__replco',
          'replit.dev',
          'worf.replit.dev',
          'Understand this warning',
          'vite] server connection lost',
          'Polling for restart'
        ];
        
        function shouldFilter(message) {
          if (typeof message !== 'string') {
            message = String(message);
          }
          return frameworkFilters.some(filter => message.includes(filter));
        }
        
        // Override all console methods to filter Replit framework messages
        console.warn = function(...args) {
          const message = args.join(' ');
          if (!shouldFilter(message)) {
            originalWarn.apply(console, args);
          }
        };
        
        console.error = function(...args) {
          const message = args.join(' ');
          if (!shouldFilter(message)) {
            originalError.apply(console, args);
          }
        };
        
        console.log = function(...args) {
          const message = args.join(' ');
          if (!shouldFilter(message)) {
            originalLog.apply(console, args);
          }
        };
        
        // Suppress window errors from Replit framework
        window.addEventListener('error', function(e) {
          if (shouldFilter(e.message)) {
            e.preventDefault();
            return false;
          }
        });
        
        console.warn = function(...args) {
          if (!shouldFilter(args[0])) {
            originalWarn.apply(console, args);
          }
        };
        
        console.error = function(...args) {
          if (!shouldFilter(args[0])) {
            originalError.apply(console, args);
          }
        };
      })();
    </script>
  </head>
  <body>
    <!-- Meta Pixel noscript fallback -->
    <noscript><img height="1" width="1" style="display:none"
      src="https://www.facebook.com/tr?id=1409057863445071&ev=PageView&noscript=1"
    /></noscript>
    
    <div id="root"></div>
    <!-- SURGICAL FIX: Intercept and block replit.com beacon.js requests -->
    <script>
      // Override fetch to intercept replit.com beacon.js requests
      const originalFetch = window.fetch;
      window.fetch = function(...args) {
        const url = args[0];
        if (typeof url === 'string' && url.includes('replit.com') && url.includes('beacon.js')) {
          console.log('Blocked replit.com beacon.js request:', url);
          // Return successful response with local beacon.js
          return fetch('/public/js/beacon.js');
        }
        return originalFetch.apply(this, args);
      };

      // Override XMLHttpRequest for older request methods
      const originalXHROpen = XMLHttpRequest.prototype.open;
      XMLHttpRequest.prototype.open = function(method, url, ...args) {
        if (typeof url === 'string' && url.includes('replit.com') && url.includes('beacon.js')) {
          console.log('Blocked XMLHttpRequest to replit.com beacon.js:', url);
          url = '/public/js/beacon.js';
        }
        return originalXHROpen.call(this, method, url, ...args);
      };

      // Block dynamic script creation for replit.com beacon.js
      const originalCreateElement = document.createElement;
      document.createElement = function(tagName) {
        const element = originalCreateElement.call(this, tagName);
        if (tagName.toLowerCase() === 'script') {
          const originalSetAttribute = element.setAttribute;
          element.setAttribute = function(name, value) {
            if (name === 'src' && typeof value === 'string' && value.includes('replit.com') && value.includes('beacon.js')) {
              console.log('Blocked script src to replit.com beacon.js:', value);
              value = '/public/js/beacon.js';
            }
            return originalSetAttribute.call(this, name, value);
          };
          
          Object.defineProperty(element, 'src', {
            set: function(value) {
              if (typeof value === 'string' && value.includes('replit.com') && value.includes('beacon.js')) {
                console.log('Blocked script.src to replit.com beacon.js:', value);
                value = '/public/js/beacon.js';
              }
              this.setAttribute('src', value);
            },
            get: function() {
              return this.getAttribute('src');
            }
          });
        }
        return element;
      };
    </script>
    
    <script type="module" src="/dist/main.js"></script>
    <!-- Replit banner script disabled to prevent HTML injection in API responses -->
    <!-- <script type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js"></script> -->
  </body>
</html>